
Communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000266  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  000002da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000107e  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000865  00000000  00000000  000014ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b7  00000000  00000000  00001d33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  000024ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e9  00000000  00000000  00002694  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000911  00000000  00000000  00002d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000368e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 c7 00 	call	0x18e	; 0x18e <main>
  74:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <gpioPinDirection>:
		return ret;
}

void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
	if(u8_direction == OUTPUT)
  7c:	4f 3f       	cpi	r20, 0xFF	; 255
  7e:	c1 f4       	brne	.+48     	; 0xb0 <gpioPinDirection+0x34>
	{
			switch(u8_port){
  80:	81 30       	cpi	r24, 0x01	; 1
  82:	51 f0       	breq	.+20     	; 0x98 <gpioPinDirection+0x1c>
  84:	28 f0       	brcs	.+10     	; 0x90 <gpioPinDirection+0x14>
  86:	82 30       	cpi	r24, 0x02	; 2
  88:	59 f0       	breq	.+22     	; 0xa0 <gpioPinDirection+0x24>
  8a:	83 30       	cpi	r24, 0x03	; 3
  8c:	69 f0       	breq	.+26     	; 0xa8 <gpioPinDirection+0x2c>
  8e:	08 95       	ret
				case GPIOA:
				PORTA_DIR |= u8_pins;
  90:	8a b3       	in	r24, 0x1a	; 26
  92:	68 2b       	or	r22, r24
  94:	6a bb       	out	0x1a, r22	; 26
				break;
  96:	08 95       	ret
				case GPIOB:
				PORTB_DIR |= u8_pins;
  98:	87 b3       	in	r24, 0x17	; 23
  9a:	68 2b       	or	r22, r24
  9c:	67 bb       	out	0x17, r22	; 23
				break;
  9e:	08 95       	ret
				case GPIOC:
				PORTC_DIR |= u8_pins;
  a0:	84 b3       	in	r24, 0x14	; 20
  a2:	68 2b       	or	r22, r24
  a4:	64 bb       	out	0x14, r22	; 20
				break;
  a6:	08 95       	ret
				case GPIOD:
				PORTD_DIR |= u8_pins;
  a8:	81 b3       	in	r24, 0x11	; 17
  aa:	68 2b       	or	r22, r24
  ac:	61 bb       	out	0x11, r22	; 17
				break;
  ae:	08 95       	ret
			}
	}
	else
	{
			switch(u8_port){
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	59 f0       	breq	.+22     	; 0xca <gpioPinDirection+0x4e>
  b4:	28 f0       	brcs	.+10     	; 0xc0 <gpioPinDirection+0x44>
  b6:	82 30       	cpi	r24, 0x02	; 2
  b8:	69 f0       	breq	.+26     	; 0xd4 <gpioPinDirection+0x58>
  ba:	83 30       	cpi	r24, 0x03	; 3
  bc:	81 f0       	breq	.+32     	; 0xde <gpioPinDirection+0x62>
  be:	08 95       	ret
				case GPIOA:
				PORTA_DIR &= ~(u8_pins);
  c0:	8a b3       	in	r24, 0x1a	; 26
  c2:	60 95       	com	r22
  c4:	68 23       	and	r22, r24
  c6:	6a bb       	out	0x1a, r22	; 26
				break;
  c8:	08 95       	ret
				case GPIOB:
				PORTB_DIR &= ~(u8_pins);
  ca:	87 b3       	in	r24, 0x17	; 23
  cc:	60 95       	com	r22
  ce:	68 23       	and	r22, r24
  d0:	67 bb       	out	0x17, r22	; 23
				break;
  d2:	08 95       	ret
				case GPIOC:
				PORTC_DIR &= ~(u8_pins);
  d4:	84 b3       	in	r24, 0x14	; 20
  d6:	60 95       	com	r22
  d8:	68 23       	and	r22, r24
  da:	64 bb       	out	0x14, r22	; 20
				break;
  dc:	08 95       	ret
				case GPIOD:
				PORTD_DIR &= ~(u8_pins);
  de:	81 b3       	in	r24, 0x11	; 17
  e0:	60 95       	com	r22
  e2:	68 23       	and	r22, r24
  e4:	61 bb       	out	0x11, r22	; 17
  e6:	08 95       	ret

000000e8 <gpioPinWrite>:
}

void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{
	
		if(u8_value == HIGH)
  e8:	4f 3f       	cpi	r20, 0xFF	; 255
  ea:	c1 f4       	brne	.+48     	; 0x11c <gpioPinWrite+0x34>
		{
			switch(u8_port){
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	51 f0       	breq	.+20     	; 0x104 <gpioPinWrite+0x1c>
  f0:	28 f0       	brcs	.+10     	; 0xfc <gpioPinWrite+0x14>
  f2:	82 30       	cpi	r24, 0x02	; 2
  f4:	59 f0       	breq	.+22     	; 0x10c <gpioPinWrite+0x24>
  f6:	83 30       	cpi	r24, 0x03	; 3
  f8:	69 f0       	breq	.+26     	; 0x114 <gpioPinWrite+0x2c>
  fa:	08 95       	ret
				case GPIOA:
				PORTA_DATA |= u8_pins;
  fc:	8b b3       	in	r24, 0x1b	; 27
  fe:	68 2b       	or	r22, r24
 100:	6b bb       	out	0x1b, r22	; 27
				break;
 102:	08 95       	ret
				case GPIOB:
				PORTB_DATA |= u8_pins;
 104:	88 b3       	in	r24, 0x18	; 24
 106:	68 2b       	or	r22, r24
 108:	68 bb       	out	0x18, r22	; 24
				break;
 10a:	08 95       	ret
				case GPIOC:
				PORTC_DATA |= u8_pins;
 10c:	85 b3       	in	r24, 0x15	; 21
 10e:	68 2b       	or	r22, r24
 110:	65 bb       	out	0x15, r22	; 21
				break;
 112:	08 95       	ret
				case GPIOD:
				PORTD_DATA |= u8_pins;
 114:	82 b3       	in	r24, 0x12	; 18
 116:	68 2b       	or	r22, r24
 118:	62 bb       	out	0x12, r22	; 18
				break;
 11a:	08 95       	ret
			}
		}
		else
		{
			switch(u8_port){
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	59 f0       	breq	.+22     	; 0x136 <gpioPinWrite+0x4e>
 120:	28 f0       	brcs	.+10     	; 0x12c <gpioPinWrite+0x44>
 122:	82 30       	cpi	r24, 0x02	; 2
 124:	69 f0       	breq	.+26     	; 0x140 <gpioPinWrite+0x58>
 126:	83 30       	cpi	r24, 0x03	; 3
 128:	81 f0       	breq	.+32     	; 0x14a <gpioPinWrite+0x62>
 12a:	08 95       	ret
				case GPIOA:
				PORTA_DATA &= ~(u8_pins);
 12c:	8b b3       	in	r24, 0x1b	; 27
 12e:	60 95       	com	r22
 130:	68 23       	and	r22, r24
 132:	6b bb       	out	0x1b, r22	; 27
				break;
 134:	08 95       	ret
				case GPIOB:
				PORTB_DATA &= ~(u8_pins);
 136:	88 b3       	in	r24, 0x18	; 24
 138:	60 95       	com	r22
 13a:	68 23       	and	r22, r24
 13c:	68 bb       	out	0x18, r22	; 24
				break;
 13e:	08 95       	ret
				case GPIOC:
				PORTC_DATA &= ~(u8_pins);
 140:	85 b3       	in	r24, 0x15	; 21
 142:	60 95       	com	r22
 144:	68 23       	and	r22, r24
 146:	65 bb       	out	0x15, r22	; 21
				break;
 148:	08 95       	ret
				case GPIOD:
				PORTD_DATA &= ~(u8_pins);
 14a:	82 b3       	in	r24, 0x12	; 18
 14c:	60 95       	com	r22
 14e:	68 23       	and	r22, r24
 150:	62 bb       	out	0x12, r22	; 18
 152:	08 95       	ret

00000154 <slave>:
	uint8_t i = 0;
	while(1){
		i%=10;
		SPI_sendByte(i);
		i++;
		timer0DelayMs(1000);
 154:	e0 e6       	ldi	r30, 0x60	; 96
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	10 82       	st	Z, r1
 15a:	11 82       	std	Z+1, r1	; 0x01
 15c:	12 82       	std	Z+2, r1	; 0x02
 15e:	13 82       	std	Z+3, r1	; 0x03
 160:	14 82       	std	Z+4, r1	; 0x04
 162:	15 82       	std	Z+5, r1	; 0x05
 164:	cf 01       	movw	r24, r30
 166:	0e 94 03 01 	call	0x206	; 0x206 <SPI_init>
 16a:	0e 94 2b 01 	call	0x256	; 0x256 <spi_enable>
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 c9 00 	call	0x192	; 0x192 <sevenSegInit>
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <sevenSegEnable>
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	8a bb       	out	0x1a, r24	; 26
 17e:	0e 94 2d 01 	call	0x25a	; 0x25a <SPI_recieveByte>
 182:	8b bb       	out	0x1b, r24	; 27
 184:	68 2f       	mov	r22, r24
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	0e 94 f5 00 	call	0x1ea	; 0x1ea <sevenSegWrite>
 18c:	f8 cf       	rjmp	.-16     	; 0x17e <slave+0x2a>

0000018e <main>:
	*/
}
int main(){
	
	//master();
	slave();
 18e:	0e 94 aa 00 	call	0x154	; 0x154 <slave>

00000192 <sevenSegInit>:
	switch(en_segment_id){
		case SEG_0:
		           gpioPinWrite(SEG_EN1_GPIO,SEG_EN1_BIT,LOW);
					break;
		case SEG_1:
			      gpioPinWrite(SEG_EN2_GPIO,SEG_EN2_BIT,LOW);
 192:	88 23       	and	r24, r24
 194:	19 f0       	breq	.+6      	; 0x19c <sevenSegInit+0xa>
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	61 f0       	breq	.+24     	; 0x1b2 <sevenSegInit+0x20>
 19a:	08 95       	ret
 19c:	4f ef       	ldi	r20, 0xFF	; 255
 19e:	6f e0       	ldi	r22, 0x0F	; 15
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
 1a6:	4f ef       	ldi	r20, 0xFF	; 255
 1a8:	64 e0       	ldi	r22, 0x04	; 4
 1aa:	83 e0       	ldi	r24, 0x03	; 3
 1ac:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
 1b0:	08 95       	ret
 1b2:	4f ef       	ldi	r20, 0xFF	; 255
 1b4:	6f e0       	ldi	r22, 0x0F	; 15
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
 1bc:	4f ef       	ldi	r20, 0xFF	; 255
 1be:	68 e0       	ldi	r22, 0x08	; 8
 1c0:	83 e0       	ldi	r24, 0x03	; 3
 1c2:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
 1c6:	08 95       	ret

000001c8 <sevenSegEnable>:
 1c8:	88 23       	and	r24, r24
 1ca:	19 f0       	breq	.+6      	; 0x1d2 <sevenSegEnable+0xa>
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	39 f0       	breq	.+14     	; 0x1de <sevenSegEnable+0x16>
 1d0:	08 95       	ret
 1d2:	4f ef       	ldi	r20, 0xFF	; 255
 1d4:	64 e0       	ldi	r22, 0x04	; 4
 1d6:	83 e0       	ldi	r24, 0x03	; 3
 1d8:	0e 94 74 00 	call	0xe8	; 0xe8 <gpioPinWrite>
 1dc:	08 95       	ret
 1de:	4f ef       	ldi	r20, 0xFF	; 255
 1e0:	68 e0       	ldi	r22, 0x08	; 8
 1e2:	83 e0       	ldi	r24, 0x03	; 3
 1e4:	0e 94 74 00 	call	0xe8	; 0xe8 <gpioPinWrite>
 1e8:	08 95       	ret

000001ea <sevenSegWrite>:
	}
	
	
}
/*IMPLEMENTATION OF SEVENSEGEMENT WRITE*/
void sevenSegWrite(En_SevenSegId_t en_segment_id, uint8_t u8_number){
 1ea:	cf 93       	push	r28
 1ec:	c6 2f       	mov	r28, r22
	
	
	gpioPinWrite(SEG_BCD_GPIO,SEG_BCD_BITS,LOW);
 1ee:	40 e0       	ldi	r20, 0x00	; 0
 1f0:	6f e0       	ldi	r22, 0x0F	; 15
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 74 00 	call	0xe8	; 0xe8 <gpioPinWrite>
	gpioPinWrite(SEG_BCD_GPIO,u8_number,HIGH);
 1f8:	4f ef       	ldi	r20, 0xFF	; 255
 1fa:	6c 2f       	mov	r22, r28
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 74 00 	call	0xe8	; 0xe8 <gpioPinWrite>
	
	
	
	
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <SPI_init>:

void SPI_sendByte(const uint8_t data) 
{
	 SPDR = data; //send data by SPI
	 while((SPSR& (1<<SPIF)) == 0); //wait until SPI interrupt flag=1 (data is sent correctly)
}
 206:	fc 01       	movw	r30, r24
 208:	80 81       	ld	r24, Z
 20a:	88 23       	and	r24, r24
 20c:	39 f0       	breq	.+14     	; 0x21c <SPI_init+0x16>
 20e:	80 31       	cpi	r24, 0x10	; 16
 210:	49 f4       	brne	.+18     	; 0x224 <SPI_init+0x1e>
 212:	bc 9a       	sbi	0x17, 4	; 23
 214:	bd 9a       	sbi	0x17, 5	; 23
 216:	bf 9a       	sbi	0x17, 7	; 23
 218:	be 98       	cbi	0x17, 6	; 23
 21a:	04 c0       	rjmp	.+8      	; 0x224 <SPI_init+0x1e>
 21c:	bc 98       	cbi	0x17, 4	; 23
 21e:	bd 98       	cbi	0x17, 5	; 23
 220:	bf 98       	cbi	0x17, 7	; 23
 222:	be 9a       	sbi	0x17, 6	; 23
 224:	9d b1       	in	r25, 0x0d	; 13
 226:	82 81       	ldd	r24, Z+2	; 0x02
 228:	89 2b       	or	r24, r25
 22a:	8d b9       	out	0x0d, r24	; 13
 22c:	9d b1       	in	r25, 0x0d	; 13
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	89 2b       	or	r24, r25
 232:	8d b9       	out	0x0d, r24	; 13
 234:	9d b1       	in	r25, 0x0d	; 13
 236:	80 81       	ld	r24, Z
 238:	89 2b       	or	r24, r25
 23a:	8d b9       	out	0x0d, r24	; 13
 23c:	9d b1       	in	r25, 0x0d	; 13
 23e:	85 81       	ldd	r24, Z+5	; 0x05
 240:	89 2b       	or	r24, r25
 242:	8d b9       	out	0x0d, r24	; 13
 244:	9d b1       	in	r25, 0x0d	; 13
 246:	81 81       	ldd	r24, Z+1	; 0x01
 248:	89 2b       	or	r24, r25
 24a:	8d b9       	out	0x0d, r24	; 13
 24c:	9e b1       	in	r25, 0x0e	; 14
 24e:	83 81       	ldd	r24, Z+3	; 0x03
 250:	89 2b       	or	r24, r25
 252:	8e b9       	out	0x0e, r24	; 14
 254:	08 95       	ret

00000256 <spi_enable>:
 256:	6e 9a       	sbi	0x0d, 6	; 13
 258:	08 95       	ret

0000025a <SPI_recieveByte>:

uint8_t SPI_recieveByte(void)
{
   while((SPSR& (1<<SPIF)) == 0){} //wait until SPI interrupt flag=1(data is receive correctly)
 25a:	77 9b       	sbis	0x0e, 7	; 14
 25c:	fe cf       	rjmp	.-4      	; 0x25a <SPI_recieveByte>
   return SPDR; //return the received byte from SPI data register
 25e:	8f b1       	in	r24, 0x0f	; 15
}
 260:	08 95       	ret

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
